#!/bin/bash

source "${CYCLECLOUD_PROJECT_PATH}/default/files/default.sh" || exit 1

function fail() {
    local errorMsg="$1"
    [[ -z "$errorMsg" ]] || echo -e "ERROR: $errorMsg" >&2
    exit 2
}

function get_package_name() {
    local package_name=$(jetpack config pbspro.package "") || fail
    local package_type=$1 # Contains "server", "client", or "execution"

    if [[ -z "$package_name" ]]; then
        if [[ "${PBSPRO_VERSION%%.*}" -lt 20 ]]; then
            echo "pbspro-${package_type}-${PBSPRO_VERSION}.x86_64.rpm"
        else
            echo "openpbs-${package_type}-${PBSPRO_VERSION}.x86_64.rpm"
        fi
    else
        echo "$package_name"
    fi
}

function get_server_hostname() {
    local server_hostname=$(jetpack config pbspro.scheduler "") || fail
    local cluster_name=$(jq -r .cluster "$CONFIG_PATH") || fail

    if [[ -z "$server_hostname" ]]; then
        local -r max_retries=10
        local -r retry_delay=15
        local attempt=1

        # Read server hostname from azpbs.env config file generated by server node
        if [[ ! -e "/sched/${cluster_name}/azpbs.env" ]]; then
            while [[ $attempt -lt $max_retries ]]; do
                sleep $retry_delay
                ((attempt+=1))
                
                if [[ -e "/sched/${cluster_name}/azpbs.env" ]]; then
                    break;
                fi
            done

            if [[ $attempt == $max_retries ]]; then
                fail "Failed to read /sched/${cluster_name}/azpbs.env after $max_retries attempts. Exiting."
            fi
        fi
        source "/sched/${cluster_name}/azpbs.env" || exit 1
        echo "$PBS_SCHEDULER_HOSTNAME"
    else
        echo "$server_hostname"
    fi
}